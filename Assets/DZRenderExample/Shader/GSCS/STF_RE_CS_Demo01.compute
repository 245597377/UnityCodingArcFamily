// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Update
#include "UnityCG.cginc"
struct Particle
{
	float3 position;
	float3 velocity;
};

float dt;
int shouldMove;
float3 centerPosition1;
float3 centerPosition2;
float SpeedScale;
RWStructuredBuffer<Particle> Particles;

//可执行的函数
//numthreads 是一次调用的批处理次数 括号里是 id
//id 用 id.x id.y id.z 来访问
[numthreads(1024,1,1)]
void Update(uint3 id : SV_DispatchThreadID)
{
	if (shouldMove > 0) {
		float3 v1 = centerPosition1 - Particles[id.x].position ;
		float3 v2 = centerPosition2 - Particles[id.x].position ;
		float len1 = length(v1);
		float len2 = length(v2);
		float3  vdir = (v1 * len1 * 1+ v2 * len2 * 1 ) /  (len1 + len2);
		Particles[id.x].velocity = Particles[id.x].velocity + normalize(vdir) * SpeedScale * dt;
	}
	Particles[id.x].position = Particles[id.x].position +  Particles[id.x].velocity * dt;
}